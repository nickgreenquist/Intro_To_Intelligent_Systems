@relation  balance
@attribute Left-weight real[1.0,5.0]
@attribute Left-distance real[1.0,5.0]
@attribute Right-weight real[1.0,5.0]
@attribute Right-distance real[1.0,5.0]
@attribute Balance_scale{L,B,R}
@inputs Left-weight,Left-distance,Right-weight,Right-distance
@outputs Balance_scale
@data

@decisiontree

if ( Left-weight <= 2.000000 ) then
{
	if ( Right-weight <= 2.000000 ) then
	{
		if ( Right-distance <= 2.000000 ) then
		{
			if ( Left-distance <= 2.000000 ) then
			{
				if ( Left-weight <= 1.000000 ) then
				{
					if ( Left-distance <= 1.000000 ) then
					{
						Balance_scale = "R"
					}
					elseif ( Left-distance > 1.000000 ) then
					{
						Balance_scale = "B"
					}
				}
				elseif ( Left-weight > 1.000000 ) then
				{
					if ( Right-distance <= 1.000000 ) then
					{
						Balance_scale = "L"
					}
					elseif ( Right-distance > 1.000000 ) then
					{
						Balance_scale = "B"
					}
				}
			}
			elseif ( Left-distance > 2.000000 ) then
			{
				Balance_scale = "L"
			}
		}
		elseif ( Right-distance > 2.000000 ) then
		{
			if ( Left-distance <= 2.000000 ) then
			{
				Balance_scale = "R"
			}
			elseif ( Left-distance > 2.000000 ) then
			{
				if ( Left-weight <= 1.000000 ) then
				{
					if ( Right-weight <= 1.000000 ) then
					{
						if ( Left-distance <= 3.000000 ) then
						{
							Balance_scale = "R"
						}
						elseif ( Left-distance > 3.000000 ) then
						{
							if ( Right-distance <= 4.000000 ) then
							{
								Balance_scale = "L"
							}
							elseif ( Right-distance > 4.000000 ) then
							{
								Balance_scale = "B"
							}
						}
					}
					elseif ( Right-weight > 1.000000 ) then
					{
						Balance_scale = "R"
					}
				}
				elseif ( Left-weight > 1.000000 ) then
				{
					if ( Right-weight <= 1.000000 ) then
					{
						Balance_scale = "L"
					}
					elseif ( Right-weight > 1.000000 ) then
					{
						if ( Left-distance <= 4.000000 ) then
						{
							if ( Right-distance <= 4.000000 ) then
							{
								Balance_scale = "B"
							}
							elseif ( Right-distance > 4.000000 ) then
							{
								Balance_scale = "R"
							}
						}
						elseif ( Left-distance > 4.000000 ) then
						{
							Balance_scale = "L"
						}
					}
				}
			}
		}
	}
	elseif ( Right-weight > 2.000000 ) then
	{
		if ( Right-distance <= 2.000000 ) then
		{
			if ( Left-distance <= 3.000000 ) then
			{
				if ( Left-distance <= 2.000000 ) then
				{
					Balance_scale = "R"
				}
				elseif ( Left-distance > 2.000000 ) then
				{
					if ( Right-weight <= 3.000000 ) then
					{
						Balance_scale = "B"
					}
					elseif ( Right-weight > 3.000000 ) then
					{
						Balance_scale = "R"
					}
				}
			}
			elseif ( Left-distance > 3.000000 ) then
			{
				if ( Left-weight <= 1.000000 ) then
				{
					if ( Right-distance <= 1.000000 ) then
					{
						if ( Right-weight <= 4.000000 ) then
						{
							Balance_scale = "L"
						}
						elseif ( Right-weight > 4.000000 ) then
						{
							Balance_scale = "B"
						}
					}
					elseif ( Right-distance > 1.000000 ) then
					{
						Balance_scale = "R"
					}
				}
				elseif ( Left-weight > 1.000000 ) then
				{
					Balance_scale = "L"
				}
			}
		}
		elseif ( Right-distance > 2.000000 ) then
		{
			Balance_scale = "R"
		}
	}
}
elseif ( Left-weight > 2.000000 ) then
{
	if ( Left-distance <= 1.000000 ) then
	{
		if ( Right-weight <= 1.000000 ) then
		{
			if ( Right-distance <= 3.000000 ) then
			{
				Balance_scale = "L"
			}
			elseif ( Right-distance > 3.000000 ) then
			{
				if ( Left-weight <= 4.000000 ) then
				{
					Balance_scale = "R"
				}
				elseif ( Left-weight > 4.000000 ) then
				{
					Balance_scale = "L"
				}
			}
		}
		elseif ( Right-weight > 1.000000 ) then
		{
			if ( Right-distance <= 1.000000 ) then
			{
				if ( Right-weight <= 3.000000 ) then
				{
					Balance_scale = "L"
				}
				elseif ( Right-weight > 3.000000 ) then
				{
					if ( Left-weight <= 4.000000 ) then
					{
						Balance_scale = "R"
					}
					elseif ( Left-weight > 4.000000 ) then
					{
						Balance_scale = "L"
					}
				}
			}
			elseif ( Right-distance > 1.000000 ) then
			{
				Balance_scale = "R"
			}
		}
	}
	elseif ( Left-distance > 1.000000 ) then
	{
		if ( Right-weight <= 2.000000 ) then
		{
			Balance_scale = "L"
		}
		elseif ( Right-weight > 2.000000 ) then
		{
			if ( Right-distance <= 2.000000 ) then
			{
				Balance_scale = "L"
			}
			elseif ( Right-distance > 2.000000 ) then
			{
				if ( Left-distance <= 3.000000 ) then
				{
					Balance_scale = "R"
				}
				elseif ( Left-distance > 3.000000 ) then
				{
					if ( Right-distance <= 3.000000 ) then
					{
						Balance_scale = "L"
					}
					elseif ( Right-distance > 3.000000 ) then
					{
						if ( Right-weight <= 4.000000 ) then
						{
							if ( Left-weight <= 3.000000 ) then
							{
								if ( Right-weight <= 3.000000 ) then
								{
									Balance_scale = "B"
								}
								elseif ( Right-weight > 3.000000 ) then
								{
									Balance_scale = "R"
								}
							}
							elseif ( Left-weight > 3.000000 ) then
							{
								if ( Right-weight <= 3.000000 ) then
								{
									Balance_scale = "L"
								}
								elseif ( Right-weight > 3.000000 ) then
								{
									if ( Right-distance <= 4.000000 ) then
									{
										Balance_scale = "L"
									}
									elseif ( Right-distance > 4.000000 ) then
									{
										Balance_scale = "B"
									}
								}
							}
						}
						elseif ( Right-weight > 4.000000 ) then
						{
							if ( Left-weight <= 4.000000 ) then
							{
								Balance_scale = "R"
							}
							elseif ( Left-weight > 4.000000 ) then
							{
								Balance_scale = "B"
							}
						}
					}
				}
			}
		}
	}
}

@TotalNumberOfNodes 39
@NumberOfLeafs 40
@TotalNumberOfNodes 39
@NumberOfAntecedentsByRule 6.275

@NumberOfItemsetsTraining 563
@NumberOfCorrectlyClassifiedTraining 507
@PercentageOfCorrectlyClassifiedTraining 90.05328%
@NumberOfInCorrectlyClassifiedTraining 56
@PercentageOfInCorrectlyClassifiedTraining 9.946714%

@NumberOfItemsetsTest 62
@NumberOfCorrectlyClassifiedTest 47
@PercentageOfCorrectlyClassifiedTest 75.80645%
@NumberOfInCorrectlyClassifiedTest 15
@PercentageOfInCorrectlyClassifiedTest 24.193548%

@ElapsedTime 0:0:0